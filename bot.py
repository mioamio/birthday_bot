import sqlite3
from datetime import datetime
from telegram import Update
from telegram.ext import Updater, CommandHandler, CallbackContext, MessageHandler, Filters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_NAME = 'birthday_bot.db'

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def get_db_connection():
    conn = sqlite3.connect(DB_NAME)
    conn.row_factory = sqlite3.Row
    return conn

# –ö–æ–º–∞–Ω–¥–∞ /start
def start(update: Update, context: CallbackContext):
    update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π —Å –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è.")

# –ö–æ–º–∞–Ω–¥–∞ /add - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def add_user(update: Update, context: CallbackContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        args = context.args
        if len(args) < 3:
            update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add –ò–º—è –§–∞–º–∏–ª–∏—è –î–µ–Ω—å_—Ä–æ–∂–¥–µ–Ω–∏—è (YYYY-MM-DD) [–¢–µ–∫—Å—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è]")
            return

        first_name, last_name, birthday = args[0], args[1], args[2]
        congratulation_text = " ".join(args[3:]) if len(args) > 3 else None

        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute(
            "INSERT INTO users (first_name, last_name, birthday, congratulation_text) VALUES (?, ?, ?, ?)",
            (first_name, last_name, birthday, congratulation_text)
        )
        conn.commit()
        conn.close()
        update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {first_name} {last_name} –¥–æ–±–∞–≤–ª–µ–Ω!")
    except Exception as e:
        update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /upload - –∑–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∫–∏
def upload_photo(update: Update, context: CallbackContext):
    try:
        args = context.args
        if len(args) < 1:
            update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /upload ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return

        user_id = args[0]
        if not update.message.photo:
            update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.")
            return

        # –ü–æ–ª—É—á–∞–µ–º file_id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–æ—Ç–æ
        photo_file_id = update.message.photo[-1].file_id

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("UPDATE users SET photo_file_id = ? WHERE id = ?", (photo_file_id, user_id))
        conn.commit()
        conn.close()
        update.message.reply_text(f"–û—Ç–∫—Ä—ã—Ç–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id} –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
    except Exception as e:
        update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /settext - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è
def set_congratulation_text(update: Update, context: CallbackContext):
    try:
        args = context.args
        if len(args) < 2:
            update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /settext ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¢–µ–∫—Å—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è")
            return

        user_id = args[0]
        congratulation_text = " ".join(args[1:])

        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("UPDATE users SET congratulation_text = ? WHERE id = ?", (congratulation_text, user_id))
        conn.commit()
        conn.close()
        update.message.reply_text(f"–¢–µ–∫—Å—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id} –æ–±–Ω–æ–≤–ª—ë–Ω.")
    except Exception as e:
        update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /list - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def list_users(update: Update, context: CallbackContext):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users")
    users = cursor.fetchall()
    conn.close()

    if not users:
        update.message.reply_text("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
        return

    user_list = "\n".join([f"ID: {user['id']}, –ò–º—è: {user['first_name']} {user['last_name']}, –î–†: {user['birthday']}" for user in users])
    update.message.reply_text(f"–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n{user_list}")

# –ö–æ–º–∞–Ω–¥–∞ /myid - –ø–æ–∫–∞–∑–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def my_id(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    update.message.reply_text(f"–í–∞—à ID: {user_id}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è
def check_birthdays(context: CallbackContext):
    today = datetime.today().strftime('%m-%d')  # –¢–µ–∫—É—â–∏–π –¥–µ–Ω—å –∏ –º–µ—Å—è—Ü
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE strftime('%m-%d', birthday) = ?", (today,))
    users = cursor.fetchall()
    conn.close()

    for user in users:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, –∏–Ω–∞—á–µ —Ç–µ–∫—Å—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        message = user['congratulation_text'] or f"üéâüéÇ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º {user['first_name']} {user['last_name']} —Å –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è! üéÇüéâ"
        if user['telegram_id']:
            message += f" @{user['telegram_id']}"

        # –ï—Å–ª–∏ –µ—Å—Ç—å file_id –æ—Ç–∫—Ä—ã—Ç–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ—ë
        if user['photo_file_id']:
            context.bot.send_photo(chat_id=CHAT_ID, photo=user['photo_file_id'], caption=message)
        else:
            context.bot.send_message(chat_id=CHAT_ID, text=message)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    TOKEN = '–í–ê–®_–¢–û–ö–ï–ù'
    # ID –≥—Ä—É–ø–ø—ã, –∫—É–¥–∞ –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è
    global CHAT_ID
    CHAT_ID = 'ID_–í–ê–®–ï–ô_–ì–†–£–ü–ü–´'

    updater = Updater(TOKEN)
    dispatcher = updater.dispatcher

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("add", add_user))
    dispatcher.add_handler(CommandHandler("upload", upload_photo))
    dispatcher.add_handler(CommandHandler("settext", set_congratulation_text))
    dispatcher.add_handler(CommandHandler("list", list_users))
    dispatcher.add_handler(CommandHandler("myid", my_id))
    dispatcher.add_handler(MessageHandler(Filters.photo, upload_photo))

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è
    job_queue = updater.job_queue
    job_queue.run_daily(check_birthdays, time=datetime.time(hour=9, minute=0))  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ 9:00 —É—Ç—Ä–∞

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()